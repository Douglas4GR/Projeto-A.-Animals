@inject ClientApiCicloAvaliativo cliente
@inject ClientApiPainelAviso painelAviso
@inject ClientApiServidor clienteServidor
@page "/principal"
@using BlazorStrap
@using System.Security
@using HttpClientService
@using RH.Models
@using Util.Models
@inject IBlazorStrap _blazorStrap
@rendermode InteractiveAuto

<PageTitle>Home</PageTitle>
<BlazorStrap.V5.BSToaster Position="ToastPosition" ZIndex="ZIndex" />
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-5 col-sm-12">
            <div class="row">
                <!-- INFO DO USUARIO -->
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h1>Olá, @servidor.Nome!</h1>
                            <h4>Id Funcional: @servidor.IdFuncional</h4>
                            <h6>Seja bem-vindo(a) ao sistema de Avaliação de Servidores!</h6>
                        </div>
                    </div>
                </div>
                <!-- INFO DE CICLO AVALIATIVO -->
                <div class="col-12 mt-3">
                    <div class="card">
                        <div class="card-body">
                            <h3>Ciclo Avaliativo atual:</h3>
                            <h1>@cicloAvaliativo.AnoBase</h1>
                            <h4>Status:</h4>
                            @if (cicloAvaliativo.Aberto == true)
                            {
                                <h1 class="p-3 mb-2 bg-success text-white">Aberto!</h1>
                            }
                            else
                            {
                                <h1 class="p-3 mb-2 bg-danger text-white text-end">Fechado!</h1>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- PAINEL DE AVISOS -->
        <div class="col-lg-5 ms-lg-auto col-sm-12 mt-3">
            <div class="card">
                <div class="card-header">
                    <h1 class="mt2">Painel de Avisos</h1>
                </div>
                <div class="card-body">
                    @if (avisos != null)
                    {
                        <ul class="list-group">
                            @foreach (var aviso in avisos)
                            {
                                <li class="list-group-item">
                                    <h4><strong>@aviso.Assunto</strong></h4>
                                    <p>@aviso.Msg</p>
                                    <small>@CalcularTempoPostagem(aviso.DtCadastro)</small>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>Nenhum aviso encontrado.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    private bool carregando { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CarregarServidor();
            await AtualizarCiclosAvaliativos();
            await VerificarPainelDeAvisos();
        }
        catch (SecurityException e)
        {
            //await autenticacao_service.LogOffAsync();
            await ((AutenticacaoPersonalizada)autenticador).UpdateAutenticationStateAsync(new Token { token = null });
            LancarErroToast(e);
        }
        catch (Exception ex)
        {
            LancarErroToast(ex);
        }

    }


    //usando cicolos avaliativos para apresentar o ciclo atual no front
    private CicloAvaliativo cicloAvaliativo { get; set; } = new CicloAvaliativo();
    private List<CicloAvaliativo> ciclosAvaliativos { get; set; }
    private Servidor servidor { get; set; } = new Servidor();

    public async Task CarregarServidor()
    {
        var servidores = await clienteServidor.getServidorAsync("", await autenticacao_service.GetAuthenticationStateAsync());
        servidor = servidores.FirstOrDefault();
    }
    public async Task AtualizarCiclosAvaliativos()
    {
        carregando = true;
        ciclosAvaliativos = await cliente.getCicloAvaliativoAsync("?$top=1&$orderby=periodoIni desc", "");
        cicloAvaliativo = ciclosAvaliativos
            .FirstOrDefault();
        carregando = false;
    }



    //usando painel de avisos para apresentar os avisos no front
    private List<PainelAvisos> avisos;
    public async Task VerificarPainelDeAvisos()
    {
        var avisosObtidos = await painelAviso.getPanielAvisoAsync("?$filter=DtCadastro le " + DateTime.Now.ToString("yyyy-MM-dd") + " and DtExpiracao ge " + DateTime.Now.ToString("yyyy-MM-dd"), "");
        avisos = avisosObtidos;
    }


    // Método para calcular quanto tempo foi postado em relação ao dia de hoje
    private string CalcularTempoPostagem(DateOnly dtCadastro)
    {
        // Convertendo DateOnly para DateTime com um horário padrão de meia-noite (00:00:00)
        DateTime dataAtual = DateTime.Now;
        TimeSpan diferenca = dataAtual.Subtract(dtCadastro.ToDateTime(TimeOnly.MinValue));
        int diferencaDias = (int)diferenca.TotalDays;

        if (diferencaDias == 0)
            return "Hoje";
        else if (diferencaDias == 1)
            return "Ontem";
        else if (diferencaDias < 7)
            return $"Há {diferencaDias} {(diferencaDias == 1 ? "dia" : "dias")} atrás";
        else if (diferencaDias < 30)
            return $"Há {diferencaDias / 7} {(diferencaDias / 7 == 1 ? "semana" : "semanas")} atrás";
        else
            return $"Há {diferencaDias / 30} {(diferencaDias / 30 == 1 ? "mês" : "meses")} atrás";
    }



    //propriedades da Toast
    private Position ToastPosition { get; set; } = Position.Fixed;
    private int ZIndex { get; set; } = 1025;
    private void LancarErroToast(Exception e)
    {
        _blazorStrap.Toaster.Add("Falha", e.Message, o =>
        {
            o.Color = BSColor.Danger;
            o.CloseAfter = 5000;
            o.Toast = Toast.Default;
            o.HasIcon = true;
        });
    }

}
