@page "/minhasavaliacoes"
@using BlazorStrap
@using System.Security
@using HttpClientService
@using Microsoft.AspNetCore.Authorization
@using RH.Models
@using AvaliacaoServidorBlazor.Client.Pages
@inject IBlazorStrap _blazorStrap
@inject ClientApiImportacaoAvaliacao clientImportacao
@rendermode InteractiveAuto
@attribute [Authorize]
<PageTitle>Minhas Avaliações</PageTitle>
<BlazorStrap.V5.BSToaster Position="ToastPosition" ZIndex="ZIndex" />

    <!--prototipo de tabela de avaliações 04/04/24-->

@if(@importacoes.Count()>1)
{
    <Vinculos modelViewVinculo = "@importacoes" servidor ="@profissional"/>
}
@if (@importacoes.Count() == 1)
{
    <AvaliacoesHistorico vinculo="@matriculaSelecionada" />
}
@if (@importacoes.Count() == 0)
{
    <!-- <Loadingpage /> -->
}
@code {
    private List<ModelViewVinculo> importacoes { get; set; } = new List<ModelViewVinculo>();
    private Servidor profissional { get; set; } = new Servidor();
    private Matricula matriculaSelecionada = null;
    protected override async Task OnInitializedAsync()
    {

        try
        {
            //apenas um delay enquanto essa pagina ainda não tem dados
            //await Task.Delay(5000);
            profissional = (await clienteServidor
            .getServidorAsync("?$expand=matriculas", await autenticacao_service.GetAuthenticationStateAsync()))
            .FirstOrDefault()!;
            for (int i =0; i< profissional.matriculas.Count(); i++)
            {
                var importacao = await clientImportacao
                    .getImportacaoAvaliacaoAsync($"?$filter=MatriculaId eq {profissional.matriculas[i].Id}&$expand=unidade,DisciplinaArea&$top=1&$orderby=cicloAvaliativoId desc", await autenticacao_service.GetAuthenticationStateAsync());
                profissional.matriculas[i].Servidor = profissional;
                importacoes.Add(new ModelViewVinculo { matricula = profissional.matriculas[i], importacaoMaisrecente = importacao.FirstOrDefault() });
                //await Task.Delay(1000);
            }
            if (importacoes.Count() == 1)
                matriculaSelecionada = importacoes
                    .FirstOrDefault()
                    .matricula;
        }
        catch (SecurityException e)
        {
            await ((AutenticacaoPersonalizada)autenticador).UpdateAutenticationStateAsync(new Token { token = null });
            LancarErroToast(e);
        }
        catch (Exception ex)
        {
            LancarErroToast(ex);
        }
    }

    //propriedades da Toast
    private Position ToastPosition { get; set; } = Position.Fixed;
    private int ZIndex { get; set; } = 1025;
    private void LancarErroToast(Exception e)
    {
        _blazorStrap.Toaster.Add("Falha", e.Message, o =>
        {
            o.Color = BSColor.Danger;
            o.CloseAfter = 5000;
            o.Toast = Toast.Default;
            o.HasIcon = true;
        });
    }
}
