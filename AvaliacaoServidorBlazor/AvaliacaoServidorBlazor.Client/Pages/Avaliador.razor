@inject ClientApiCicloAvaliativo cliente
@inject ClientApiServidor clienteServidor
@inject ClientApiAvaliadorAvaliado clienteServidorAvaliado
@inject ClientApiImportacaoAvaliacao clienteImportacao
@inject IBlazorStrap _blazorStrap
@page "/avaliador"
@using BlazorStrap
@using System.Security
@using HttpClientService
@using Microsoft.AspNetCore.Authorization
@using RH.Models
@using AvaliacaoServidorBlazor.Client.Pages
@rendermode InteractiveAuto
@attribute [Authorize]

<PageTitle>Avaliar Servidores</PageTitle>
<BlazorStrap.V5.BSToaster Position="ToastPosition" ZIndex="ZIndex" />

<!--tela de avaliador 08/04/24-->
<main class="form-signin">
    <div class="container-fluid">
        <div class="row justify-content-center align-items-center">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h2 class="mt-2 Ghotam">Lista de servidores avaliáveis</h2>
                    </div>
                    <div class="card-body">
                        <h2 class="text-center mb-4 Ghotam">Avaliador: @servidor.Nome</h2>
                        <div class="row mb-3 align-items-center">
                            <div class="col-auto">
                                <label>Ciclos Avaliativos</label>
                                <select class="form-select" aria-label="Default select example" @bind="cicloSelecionadoId">
                                    <option value="0" selected>Selecione o ciclo avaliativo</option>
                                    @foreach (var ciclo in ciclosAvaliativos)
                                    {
                                        <option value="@ciclo.Id">@ciclo.AnoBase</option>
                                    }
                                </select>
                            </div>
                            <div class="col-3">
                                <label></label>
                                <input type="text" class="form-control" placeholder="Buscar por nome...">
                            </div>
                            <div class="col-auto mt-4">
                                <button class="btn btn-primary btn-sm">BUSCAR</button>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-striped algin-middle">
                                <thead>
                                    <tr class="text-center">
                                        <th>Nome</th>
                                        <th>ID Funcional</th>
                                        <th>Vínculo</th>
                                        <th>Disciplina - Área</th>
                                        <th>Avaliações</th>
                                        <th>Histórico</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr class="text-center">
                                        <td>Fulano</td>
                                        <td>123456789</td>
                                        <td>1</td>
                                        <td>Motorista</td>
                                        <td>
                                            <button class="btn btn-success" @onclick="IrParaFicha">AVALIADO</button>
                                        </td>
                                        <td>
                                            <button class="btn btn-secondary btn-sm" @onclick="AcessarHistorico">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clock-history" viewBox="0 0 16 16">
                                                    <path d="M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022zm2.004.45a7 7 0 0 0-.985-.299l.219-.976q.576.129 1.126.342zm1.37.71a7 7 0 0 0-.439-.27l.493-.87a8 8 0 0 1 .979.654l-.615.789a7 7 0 0 0-.418-.302zm1.834 1.79a7 7 0 0 0-.653-.796l.724-.69q.406.429.747.91zm.744 1.352a7 7 0 0 0-.214-.468l.893-.45a8 8 0 0 1 .45 1.088l-.95.313a7 7 0 0 0-.179-.483m.53 2.507a7 7 0 0 0-.1-1.025l.985-.17q.1.58.116 1.17zm-.131 1.538q.05-.254.081-.51l.993.123a8 8 0 0 1-.23 1.155l-.964-.267q.069-.247.12-.501m-.952 2.379q.276-.436.486-.908l.914.405q-.24.54-.555 1.038zm-.964 1.205q.183-.183.35-.378l.758.653a8 8 0 0 1-.401.432z" />
                                                    <path d="M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0z" />
                                                    <path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5" />
                                                </svg>
                                            </button>
                                        </td>
                                    </tr>
                                    <tr class="text-center">
                                        <td>Fulano da Silva</td>
                                        <td>987654321</td>
                                        <td>1</td>
                                        <td>Motorista</td>
                                        <td>
                                            <button class="btn btn-warning" @onclick="IrParaFicha">AVALIAR</button>
                                        </td>
                                        <td>
                                            <button class="btn btn-secondary btn-sm" @onclick="AcessarHistorico">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clock-history" viewBox="0 0 16 16">
                                                    <path d="M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022zm2.004.45a7 7 0 0 0-.985-.299l.219-.976q.576.129 1.126.342zm1.37.71a7 7 0 0 0-.439-.27l.493-.87a8 8 0 0 1 .979.654l-.615.789a7 7 0 0 0-.418-.302zm1.834 1.79a7 7 0 0 0-.653-.796l.724-.69q.406.429.747.91zm.744 1.352a7 7 0 0 0-.214-.468l.893-.45a8 8 0 0 1 .45 1.088l-.95.313a7 7 0 0 0-.179-.483m.53 2.507a7 7 0 0 0-.1-1.025l.985-.17q.1.58.116 1.17zm-.131 1.538q.05-.254.081-.51l.993.123a8 8 0 0 1-.23 1.155l-.964-.267q.069-.247.12-.501m-.952 2.379q.276-.436.486-.908l.914.405q-.24.54-.555 1.038zm-.964 1.205q.183-.183.35-.378l.758.653a8 8 0 0 1-.401.432z" />
                                                    <path d="M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0z" />
                                                    <path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5" />
                                                </svg>
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    private int cicloSelecionadoId { get; set; }
    private List<CicloAvaliativo> ciclosAvaliativos { get; set; } = new List<CicloAvaliativo>();
    private bool carregando { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CarregarServidor();
            await AtualizarCiclosAvaliativos();
            await CarregarAvaliados();
        }
        catch (SecurityException e)
        {
            await autenticacao_service.LogOffAsync();
            LancarErroToast(e);
        }
        catch (Exception ex)
        {
            LancarErroToast(ex);
        }
    }

    //requisitando servidor com id funcional logado
    private Servidor servidor { get; set; } = new Servidor();

    //requisitando servidores que serão avaliados
    private AvaliadorAvaliado avaliados { get; set; } = new AvaliadorAvaliado();

    //requisitando ciclo avalaiativo desejado
    private CicloAvaliativo ciclo { get; set; } = new CicloAvaliativo();

    public async Task CarregarAvaliados()
    {
        var avaliados = await clienteServidorAvaliado.getAvaliadorAvaliadoAsync("?$filter=Avaliador/CicloAvaliativoId eq {cicloSelecionadoId} &  avaliados eq {AvaliadoId} $expand=ImportacaoAvaliacao,Id,DisciplinaArea,Unidade,Matricula, Nome", await autenticacao_service.GetAuthenticationStateAsync());
    }

    public async Task CarregarServidor()
    {
        var servidores = await clienteServidor.getServidorAsync("", await autenticacao_service.GetAuthenticationStateAsync());
        servidor = servidores.FirstOrDefault();
    }

    public async Task AtualizarCiclosAvaliativos()
    {
        carregando = true;
        // Obtém a lista completa de ciclos avaliativos, ordenada pelo períodoIni de forma decrescente
        ciclosAvaliativos = await cliente.getCicloAvaliativoAsync("?$orderby=periodoIni desc", "");
        cicloSelecionadoId = ciclosAvaliativos
            .FirstOrDefault()!
            .Id;
        carregando = false;
    }

    /*public async Task<List<AvaliadorAvaliado>> getAvaliadorAvaliadoAsync(string query, string token)
    {
        var url = $"/AvaliadorAvaliado{query}";
        try
        {
            return await getAsync<AvaliadorAvaliado>(url, token);
        }
        catch (HttpRequestException ex)
        {
            throw new HttpRequestException("AvaliadorAvaliado não está disponível!", ex);
        }
    }*/



    //Importações de servidores para a pagina em 15/05
    public async Task LoadAvaliadorAvaliado(int CicloID)
    {
        //var importacoes = await clientImportacao.getAvaliadorAvaliadoAsync($"?$filter=MatriculaId eq {vinculo.Id} & cicloAvaliativoId eq {CicloID} & $expand=Carreira,Cargo,DisciplinaArea");
        await autenticacao_service.GetAuthenticationStateAsync();
    }

    //navegaçã para paginas relacionadas
    [Inject]
    NavigationManager NavigationManager { get; set; }

    private void IrParaFicha()
    {
        NavigationManager.NavigateTo("/fichaavaliador");
    }

    private void AcessarHistorico()
    {
        NavigationManager.NavigateTo("/avaliacoesHistorico");
    }

    //propriedades da Toast
    private Position ToastPosition { get; set; } = Position.Fixed;
    private int ZIndex { get; set; } = 1025;
    private void LancarErroToast(Exception e)
    {
        _blazorStrap.Toaster.Add("Falha", e.Message, o =>
        {
            o.Color = BSColor.Danger;
            o.CloseAfter = 5000;
            o.Toast = Toast.Default;
            o.HasIcon = true;
        });
    }
}

