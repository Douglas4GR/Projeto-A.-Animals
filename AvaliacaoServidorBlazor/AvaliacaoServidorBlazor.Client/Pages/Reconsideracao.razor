@page "/reconsideracao"
@using BlazorStrap
@using System.Security
@using HttpClientService
@using RH.Models
@using Util.Models
@inject IBlazorStrap _blazorStrap
@rendermode InteractiveAuto
<PageTitle>Reconsideração</PageTitle>
<BlazorStrap.V5.BSToaster Position="ToastPosition" ZIndex="ZIndex" />

<main class="w-100 m-auto">
    <div class="container-fluid">
        <div class="row justify-content-center align-items-center">
            <div class="col-auto">
                <div class="card">
                    <div class="card-body">
                        @if (tabela_loading)
                        {
                            <BSSpinner Color="BSColor.Primary" />
                        }
                        else
                        {
                            <h4 class="Ghotam text-center">Status das Reconsiderações</h4>
                            <table class="table table-striped">
                                <thead  class="Ghotam">
                                    <tr>
                                        <th>Nome</th>
                                        <th>Matricula</th>
                                        <th>Função</th>
                                        <th>Unidade</th>
                                        <th>Reconsiderar</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>Nome</td>
                                        <td>Matricula</td>
                                        <td>Função</td>
                                        <td>Unidade</td>
                                        <td>
                                            <button class="btn btn-primary">Reconsiderar</button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            <br />
                            <!--<BSDataTable FetchItems="FetchItems" PaginationBottom="true" StartPage="_startPage" RowsPerPage="20" Context="item">
                                <Header>
                                    <BSDataTableHead TValue="Servidor" Sortable="true" Column="@nameof(Servidor.Id)">Matricula</BSDataTableHead>
                                    <BSDataTableHead TValue="Servidor" Sortable="true" Column="@nameof(Servidor.Nome)">Nome</BSDataTableHead>
                                    <BSDataTableHead TValue="Servidor" Sortable="true" Column="@nameof(Servidor.Vinculo)">Vinculo</BSDataTableHead>
                                    <BSDataTableHead TValue="Servidor" Sortable="true" Column="@nameof(Servidor.DisciplinaArea)">Disciplina/Area</BSDataTableHead>
                                    <BSDataTableHead TValue="Servidor">Reconsiderar</BSDataTableHead>
                                </Header>
                                <Body>
                                    <BSDataTableRow>
                                        <BSTD>
                                            @item.Matricula
                                        </BSTD>
                                        <BSTD>
                                            @item.Nome
                                        </BSTD>
                                        <BSTD>
                                            @item.Vinculo
                                        </BSTD>
                                        <BSTD>
                                            @item.DisciplinaArea
                                        </BSTD>
                                        <BSTD>
                                            <button class="btn btn-primary">Reconsiderar</button>
                                        </BSTD>
                                    </BSDataTableRow>
                                </Body>
                            </BSDataTable>-->
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<!--essa pagina vai precisar de um select para selecionar o ciclo-->
@code {
    //variáveis da página:
    private bool tabela_loading = true;
    private readonly int _startPage = 2;

    public Servidor? _model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //apenas um delay enquanto essa pagina ainda não tem dados
            await Task.Delay(200);
            tabela_loading = false;
        }
        catch (SecurityException e)
        {
            await autenticacao_service.LogOffAsync();
            LancarErroToast(e);
        }
        catch (Exception ex)
        {
            LancarErroToast(ex);
        }
    }

    //propriedades da Toast
    private Position ToastPosition { get; set; } = Position.Fixed;
    private int ZIndex { get; set; } = 1025;
    private void LancarErroToast(Exception e)
    {
        _blazorStrap.Toaster.Add("Falha", e.Message, o =>
        {
            o.Color = BSColor.Danger;
            o.CloseAfter = 5000;
            o.Toast = Toast.Default;
            o.HasIcon = true;
        });
    }


    // Parte em teste abaixo vvv
    /*
    private async Task<(IEnumerable<Servidor>, int)> FetchItems(DataRequest dataRequest)
    {
        var count = _model.DataSet.Count();
        if (dataRequest.FilterColumnProperty != null && dataRequest.Filter != null)
        {
            var data = _model.DataSet.Where(q =>
                (q.Name.ToLower().Contains(dataRequest.Filter) && nameof(q.Name) == dataRequest.FilterColumn) ||
                (q.Email.ToLower().Contains(dataRequest.Filter) && nameof(q.Email) == dataRequest.FilterColumn)
                ).ToList();
            count = data.Count();
            return (data, count);
        }
        if (dataRequest.SortColumnProperty != null)
        {
            if (dataRequest.Descending)
                return (await _model.DataSet.OrderByDescending(x => dataRequest.SortColumnProperty.GetValue(x)).Skip(dataRequest.Page * 20).Take(20).ToListAsync(), count);
            return (await _model.DataSet.OrderBy(x => dataRequest.SortColumnProperty.GetValue(x)).Skip(dataRequest.Page * 20).Take(20).ToListAsync(), count);
        }
        return (await _model.DataSet.Skip(dataRequest.Page * 20).Take(20).ToListAsync(),count);
    }*/
}
