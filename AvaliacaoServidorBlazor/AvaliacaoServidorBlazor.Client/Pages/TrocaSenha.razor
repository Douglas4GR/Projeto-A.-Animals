@page "/trocasenha"
@using BlazorStrap
@using System.Security
@using HttpClientService
@using RH.Models
@using Util.Models
@inject IJSRuntime JSRuntimeAbandonedMutexException
@inject IBlazorStrap _blazorStrap
@rendermode InteractiveAuto
<PageTitle>Trocar Senha</PageTitle>
<BSToaster Position="Position.Fixed" ZIndex="1025" />
<main class="w-100 m-auto">
    <div class="container-fluid">
        <div class="row justify-content-center align-items-center">
            <div class="col-auto">
                <div class="card">
                    <div class="card-body">
                        <EditForm Model="_modelo" OnValidSubmit="TrocarSenha" FormName="Troca">
                            <DataAnnotationsValidator />
                            <h5 class="h3 mb-3 fw-normal Ghotam">Troca de senha:</h5>
                            <div class="form-floating mt-3">
                                <BSInput InputType="InputType.Password" @bind-Value="_modelo.senha" placeholder="Senha atual"  />
                                <BSLabel for="_modelo.senha">Senha atual</BSLabel>
                                <BSFeedback For="@(() => _modelo.senha)" ValidMessage="Senha correta." />
                            </div>
                            <div class="form-floating mt-3">
                                <BSInput InputType="InputType.Password" @bind-Value="_modelo.novasenha" class="form-control" placeholder="Nova Senha" />
                                <BSLabel for="_modelo.novasenha">Nova Senha</BSLabel>
                                <BSFeedback For="@(() => _modelo.novasenha)" ValidMessage="Senha permitida." />
                            </div>
                            <div class="form-floating mt-1">
                                <BSInput InputType="InputType.Password" @bind-Value="_modelo.novasenha2" class="form-control" placeholder="Confirmar nova senha" />
                                <BSLabel for="modelo.novasenha2">Confirmar nova senha</BSLabel>
                                <BSFeedback For="@(() => _modelo.novasenha2)" ValidMessage="Senhas correspondem." />
                            </div>
                            <div class="form-check mt-3">
                                <InputCheckbox @bind-Value="_mostrarSenhas" />
                                <label class="form-check-label" for="mostrar_senhas">Mostrar Senha</label>
                            </div>
                            <button class="btn btn-primary w-100 py-2 mt-5" type="submit">Confirmar troca de senha</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    [SupplyParameterFromForm]
    public MudarSenha? _modelo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _modelo = new MudarSenha();
        }
        catch (SecurityException e)
        {
            await autenticacao_service.LogOffAsync();
            LancarErroToast(e);
        }
        catch (Exception ex)
        {
            LancarErroToast(ex);
        }
    }

    private bool _mostrarSenhas = false;
    private void LancarErroToast(Exception e)
    {
        _blazorStrap.Toaster.Add("Falha", e.Message, o =>
        {
            o.Color = BSColor.Danger;
            o.CloseAfter = 5000;
            o.Toast = Toast.Default;
            o.HasIcon = true;
        });
    }

    private void TrocarSenha()
    {
        _modelo.TrocarSenha();
        _blazorStrap.Toaster.Add("Falha", "Operação realizada com sucesso!!!", o =>
        {
            o.Color = BSColor.Danger;
            o.CloseAfter = 5000;
            o.Toast = Toast.Default;
            o.HasIcon = true;
        });
    }
}
